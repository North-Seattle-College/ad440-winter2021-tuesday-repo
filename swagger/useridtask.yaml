swagger: "2.0"
info:
  description: "API Documentation for Users/{user_id}/tasks"
  version: "1.0.0"
  title: "Users/{user_id}/tasks API"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "nsc-fun-dev-usw2-tuesday.azurewebsites.net"

schemes:
- "https"

paths:
  /users:
    get:
      tags:
      - "users"
      summary: "Return all users"
      description: ""
      operationId: "getUsers"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        "500":
          description: "Internal server error"
    post:
      tags:
      - "users"
      summary: "Add a new user"
      description: ""
      operationId: "addUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User object that will be submitted to create new user"
        required: true
        schema:
          $ref: "#/definitions/CreateUser"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/CreateUser"
        "500":
          description: "Internal server error"

  /users/{user_id}:
    get:
      tags:
      - "users/{user_id}"
      summary: "Get a single user by user_id"
      description: ""
      operationId: "getUserById"
      produces:
      - "application/json"
      parameters:
      - name: "user_id"
        in: "path"
        description: "The id that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "User successfully found"
          schema:
            $ref: "#/definitions/User"
        "404":
          description: "User not found"
        "500":
          description: "Internal Server Error"
    put:
      tags:
      - "users/{user_id}"
      summary: "Update single user by user_id"
      description: "Update a user by user_id"
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - name: "user_id"
        in: "path"
        description: "user that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user. required fields: firstName, lastName, email."
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "200":
          description: "User updated"
        "404":
          description: "User not found"
        "500":
          description: "Internal Server Error"
    patch:
      tags:
      - "users/{user_id}"
      summary: "Update single user by user_id"
      description: "Update a user user_id"
      operationId: "patchUser"
      produces:
      - "application/json"
      parameters:
      - name: "user_id"
        in: "path"
        description: "user that needs to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "200":
          description: "User updated successfully. Note: fields optional - only fields provided will be updated"
        "404":
          description: "User not found"
        "500":
          description: "Internal Server Error"
    delete:
      tags:
      - "users/{user_id}"
      summary: "Delete a single user by user_id"
      description: "This can only be done by the user that's logged-in."
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "user_id"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "200":
          description: "User deleted"
        "400":
          description: "Delete Failed"
        "404":
          description: "User Not Found"
  
  /users/{user_id}/tasks:
    get:
      tags:
      - "/users/{user_id}/tasks"
      summary: "Get all tasks from a specific user by user_id"
      description: ""
      parameters:
      - in: "path"
        name: "user_id"
        description: "The user that needs to be fetched. "
        required: true
        type: 'integer'
      operationId: "getTasks"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Task"
        "500":
          description: "Internal server error"
    post:
      tags:
      - "/users/{user_id}/tasks"
      summary: "Add a new task for a specific user to the database"
      description: ""
      operationId: "addTask"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "user_id"
        description: "The user that needs to be fetched. Use user1 for testing. "
        required: true
        type: 'integer'
      - in: "body"
        name: "body"
        description: "\"title\" of task, and \"description\" of task are required"
        required: true
        schema:
          $ref: "#/definitions/CreateTask"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/CreateTask"
        "404":
          description: "User not found"
        "500":
          description: "Internal server error"
    
definitions:
  Task:
    type: "object"
    properties:
      user_id:
        type: "integer"
        format: "int64"
      user:
        type: "string"        
      taskId:
        type: "integer"
        format: "int64"
      title:
        type: "string"
      description:
        type: "string"        
      createdDate:
        type: "string"
        format: "date-time"
      dueDate:
        type: "string"
        format: "date-time"
      completed:
        type: "string"
      completedDate:
        type: "string"
        format: "date-time"
  User:
    type: "object"
    properties:
      user_id:
        type: "integer"
        format: "int64"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
  CreateTask:
    type: "object"
    properties:
      title:
        type: "string"
      description:
        type: "string"   
  CreateUser:
    type: "object"
    properties:
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"  
      
  